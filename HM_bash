**№1 Функционал Bash**
#!/bin/bash

# 1. Создаём список всех файлов в текущей директории с указанием их типа
echo "Список файлов и их типов в текущей директории:"
for item in *; do
    if [ -f "$item" ]; then
        echo "$item - файл"
    elif [ -d "$item" ]; then
        echo "$item - каталог"
    elif [ -L "$item" ]; then
        echo "$item - символическая ссылка"
    else
        echo "$item - другой тип"
    fi
done

# 2. Проверяем наличие определённого файла, переданного как аргумент
if [ -z "\$1" ]; then
    echo "Ошибка: не указан файл для проверки."
    exit 1
fi

if [ -e "\$1" ]; then
    echo "Файл '\$1' существует."
else
    echo "Файл '\$1' не найден."
fi

# 3. Используем цикл for для вывода информации о каждом файле: его имя и права доступа
echo "Информация о файлах и их правах доступа:"
for item in *; do
    permissions=$(ls -ld "$item" | awk '{print \$1}')
    echo "$item - права доступа: $permissions"
done

**№2 Переменная PATH**
#!/bin/bash

# Проверяем, передан ли аргумент
if [ -z "\$1" ]; then
    echo "Ошибка: не указана директория для добавления в PATH."
    exit 1
fi

# Выводим текущее значение переменной PATH
echo "Текущее значение PATH: $PATH"

# Добавляем новую директорию в PATH
export PATH="$PATH:\$1"

# Выводим обновлённое значение PATH
echo "Обновлённое значение PATH: $PATH"

**№3 Управляющие конструкции (условия и циклы)**
#!/bin/bash

# Запрашиваем у пользователя ввод числа
read -p "Введите число: " number

# Проверяем, является ли число положительным, отрицательным или нулем
if [ "$number" -gt 0 ]; then
    echo "Число положительное."
    
    # Используем цикл while для подсчета от 1 до введенного числа
    count=1
    while [ $count -le $number ]; do
        echo $count
        ((count++))  # Увеличиваем счетчик на 1
    done
elif [ "$number" -lt 0 ]; then
    echo "Число отрицательное."
else
    echo "Число равно нулю."
fi

**№4 Работа с функциями**
#!/bin/bash

# Функция для добавления префикса "Hello, " к строке
greet() {
    local name="\$1"
    echo "Hello, $name"
}

# Функция для суммирования двух чисел
sum() {
    local num1="\$1"
    local num2="\$2"
    echo $((num1 + num2))
}

# Вызов функции greet и вывод результата
read -p "Введите ваше имя: " user_name
greeting=$(greet "$user_name")
echo "$greeting"

# Ввод двух чисел и вызов функции sum
read -p "Введите первое число: " first_number
read -p "Введите второе число: " second_number
result=$(sum "$first_number" "$second_number")
echo "Сумма $first_number и $second_number равна: $result"

**№5 Управление процессами и фоновое выполнение**
#!/bin/bash

# Запускаем три команды sleep в фоновом режиме
sleep 5 &
sleep 10 &
sleep 15 &

# Выводим список фоновых задач
echo "Запущенные фоновые задачи:"
jobs

# Ждем, чтобы пользователь увидел список задач
echo "Нажмите Enter для продолжения..."
read

# Переводим первую задачу в передний план
echo "Переводим первую задачу в передний план..."
fg %1

# После завершения первой задачи, показываем оставшиеся фоновые задачи
echo "Оставшиеся фоновые задачи:"
jobs

# Переводим вторую задачу в фоновый режим
echo "Переводим вторую задачу в фоновый режим..."
bg %2

# Выводим финальный список задач
echo "Финальный список фоновых задач:"
jobs

# Ждем завершения оставшихся задач
wait
echo "Все задачи завершены."

**№6 Ввод/вывод и перенаправление**
#!/bin/bash

# Шаг 1: Чтение данных из файла input.txt
input_file="input.txt"

# Проверяем, существует ли файл input.txt
if [[ ! -f "$input_file" ]]; then
    echo "Файл $input_file не найден."
    exit 1
fi

# Шаг 2: Подсчет строк в input.txt и запись результата в output.txt
wc -l < "$input_file" > output.txt

# Шаг 3: Попытка выполнить команду ls для несуществующего файла и перенаправление ошибок в error.log
ls non_existing_file.txt 2> error.log

# Сообщение о завершении
echo "Скрипт выполнен. Результаты записаны в output.txt и error.log."

